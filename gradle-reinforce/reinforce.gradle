// 读取配置文件配置
def reinforcePropertiesFile = rootProject.file("reinforce.properties")
def reinforceProperties = new Properties()
reinforceProperties.load(new FileInputStream(reinforcePropertiesFile))

ext {
    // 加固jar包
    def configReinforceJar = reinforceProperties['reinforce.jar']
    reinforceJar = configReinforceJar != null ? "${project.rootDir}/$configReinforceJar" : "${project.rootDir}/jiagu/jiagu.jar"
    // 360加固账号
    reinforceAccount = reinforceProperties['reinforce.account']
    // 360加固账号密码
    reinforcePassword = reinforceProperties['reinforce.password']
    // 输出文件路径
    def configOutputPath = reinforceProperties['reinforce.outputPath'];
    reinforceOutputPath = configOutputPath != null ? "${project.rootDir}/$configOutputPath" : "${project.buildDir}/outputs/reinforce"

    def configStoreFile = reinforceProperties['sign.storeFile']
    // 密钥路径
    storeFile = configStoreFile != null ? "${project.rootDir}/$configStoreFile" : null
    // 密钥密码
    storePassword = reinforceProperties['sign.storePassword']
    // 密钥别名
    keyAlias = reinforceProperties['sign.keyAlias']
    // 别名密码
    keyPassword = reinforceProperties['sign.keyPassword']

    // 签名V2检测
    def configCheckJar = reinforceProperties['sign.checkV2Jar']
    checkAndroidV2SignatureJar = configCheckJar != null ? "${project.rootDir}/$configCheckJar" : null

    // 是否开启美团walle
    walleEnable = reinforceProperties['walle.enable'] == 'true'
    // 美团walle打包工具
    def configWalleJar = reinforceProperties['walle.jar']
    walleJar = configWalleJar != null ? "${project.rootDir}/$configWalleJar" : "${project.rootDir}/walle-cli-all.jar"

    // 美团打包channel配置
    def configWalleChannel = reinforceProperties['walle.channel']
    walleChannel = configWalleChannel != null ? "${project.rootDir}/$configWalleChannel" : "${project.rootDir}/walle-cli-all.jar"

    reinforceTmpPath = "${project.buildDir}/reinforceTmpApkPath"
}

def log(content, error = false) {
    def msg = "[reinforce]-> $content"
    if (error) {
        System.err.println msg
    } else {
        System.out.println msg
    }
}


/**
 * 清空上一次生成的渠道包
 * @param channelApkPath 渠道包目录地址
 * @return
 */
def cleanFilesPath(String buildType, String flavorName) {
    def outputPath = getReinforceOutputPathByFlavor(buildType, flavorName)
    log "cleanFilesPath : $outputPath"
    delete outputPath

    def tmpPath = getReinforceTmpPathByFlavor(buildType, flavorName)
    log "cleanFilesPath : $tmpPath"
    delete tmpPath

    log "cleanFilesPath : $rootProject.buildDir"
    delete rootProject.buildDir
}

def getReinforceOutputPathByFlavor(String buildType, String flavorName) {
    return getFlavorPath(reinforceOutputPath, buildType, flavorName)
}

def getReinforceTmpPathByFlavor(String buildType, String flavorName) {
    return getFlavorPath(reinforceTmpPath, buildType, flavorName)
}

/**
 * 生成产品风味路径
 * @param path
 * @param flavorName
 * @return
 */
static def getFlavorPath(String path, String buildType, String flavorName) {
    def file = new File(path, buildType)
    if (!file.exists()) {
        file.mkdirs()
    }
    if (flavorName == null) {
        return file.absolutePath
    }
    file = new File(file, flavorName)
    if (!file.exists()) {
        file.mkdirs()
    }
    return file.absolutePath
}

/**
 * 获取android sdk目录
 * @return 返回sdk下build-tools 项目使用版本的目录
 */
String getAndroidSdkPath() {
    File sdkDir = android.getSdkDirectory()
    return sdkDir.getAbsolutePath() + "/build-tools/${rootProject.ext.buildToolsVersion}/"
}

/**
 * 封装命令执行方法
 * @param cmdStr
 * @return
 */
def execCommand(String cmdStr, OutputStream outputStream = System.out) {
    def isWindows = System.properties['os.name'].contains("Windows")
    // Mac bash, Windows cmd, Linux sh
    def cmdTool = isWindows ? "cmd" : "sh"
    def arg = isWindows ? "/c" : "-c"

    exec {
        ExecSpec execSpec ->
            executable cmdTool
            args arg, cmdStr
            standardOutput = outputStream
    }
}

/**
 * 360加固
 * @param apk 加固的原始apk File
 * @param outputPath 输出目录
 */
def reinforceApk(File apk, outputPath) {
    if (reinforceAccount == null || reinforcePassword == null) {
        println "reinforceApk throw exception and forced stop!", true
        throw new RuntimeException("360 reinforceApk: please config 360 account name and password first!")
    }
    log "reinforce apk: $apk"
    if (apk == null || !apk.exists()) {
        println "reinforceApk throw exception and forced stop!", true
        throw new FileNotFoundException('apk is not exists and cannot reinforce')
    }
    // jiagu.db中缓存了多渠道信息，如果不删除会合并到当前多渠道配置
    def db = new File("${project.rootDir}/jiagu/jiagu.db")
    if (db.exists()) {
        if (!db.delete()) {
            log "reinforceApk delete jiagu.db error !", true
            throw new RuntimeException("reinforceApk delete jiagu.db failure!")
        }

    }
    def file = new File(outputPath)
    if (!file.exists()) {
        file.mkdir()
    }
    execCommand "java -jar $reinforceJar -version"
    execCommand "java -jar $reinforceJar -login $reinforceAccount $reinforcePassword"
    execCommand "java -jar ${reinforceJar} -showsign"
    execCommand "java -jar ${reinforceJar} -jiagu ${apk} ${outputPath}"

    log "--- reinforce end! ---"
}

/**
 * 加固后的apk 对齐压缩
 * @param apk 已加固apk
 * @return 返回对齐压缩后的apk
 */
def zipAlignApk(File apk) {
    if (apk == null || !apk.exists()) {
        log "zipalign reinforceApk throw exception and forced stop!", true
        throw new FileNotFoundException('apk is not exists and cannot reinforce')
    }
    def buildToolPath = getAndroidSdkPath()
    def outFilePath = "${apk.parent}/${apk.name.replaceAll(".apk", "_zip.apk")}"
    def file = new File(outFilePath)
    if (file.exists()) {
        file.delete()
    }
    execCommand "${buildToolPath}zipalign -v -p 4 ${apk} ${outFilePath}"

    return new File(outFilePath)
}

/**
 * 对apk签名
 * @param zipApk 压缩对齐后的apk
 * @return 签名后的apk
 */
def signApkV2(File zipApk, String buildType) {
    if (zipApk == null || !zipApk.exists()) {
        log "sign zipApk throw exception and forced stop!", true
        throw new FileNotFoundException('apk is not exists and cannot reinforce')
    }
    def buildToolPath = getAndroidSdkPath()
    def outFilePath = "${zipApk.parent}/${zipApk.name.replaceAll(".apk", "_sign.apk")}"

    def file = new File(outFilePath)
    if (file.exists()) {
        file.delete()
    }

    def buildTypeSignConfig = project.android.buildTypes.findByName(buildType).signingConfig
    log "sign zipApk signConfig: $buildTypeSignConfig"
    def keyPath = storeFile ?: buildTypeSignConfig.storeFile
    def storePassword = storePassword ?: buildTypeSignConfig.storePassword
    def keyAlias = keyAlias ?: buildTypeSignConfig.keyAlias
    def keyPassword = keyPassword ?: buildTypeSignConfig.keyPassword

    execCommand "${buildToolPath}apksigner sign --ks ${keyPath} " +
            "--ks-key-alias ${keyAlias} " +
            "--ks-pass pass:${storePassword} " +
            "--key-pass pass:${keyPassword} " +
            "--out ${outFilePath} ${zipApk}"

    return new File(outFilePath)
}

def checkAndroidV2Signature(File apk) {
    if (apk == null || !apk.exists()) {
        log "checkAndroidV2Signature throw exception and forced stop!", true
        throw new FileNotFoundException('apk is not exists and cannot check Android V2 Signature')
    }

    def output = new ByteArrayOutputStream()
    execCommand "java -jar $checkAndroidV2SignatureJar ${apk.path}", output
    log "check Android V2 Signature result: ${output.toString()}"
}

/**
 * 对签名后的apk添加渠道信息
 * @param apk 已签名apk
 * @return 添加渠道信息后的apk
 */
def buildChannelApks(File apk, String outputPath) {
    if (apk == null || !apk.exists()) {
        log "channel build Apk throw exception and forced stop!", true
        throw new FileNotFoundException('apk is not exists and cannot reinforce')
    }
    log "walle write channel start"
    def file = new File(outputPath)
    if (!file.exists()) {
        file.mkdir()
    }
    execCommand "java -jar ${walleJar} batch -f ${walleChannel} ${apk} ${outputPath}"
    log "walle write channel over"
}

/**
 * 重命名apk
 * @param path 渠道apk目录路径
 * @return
 */
def renameChannelApkFiles(path) {
    def regex = "_jiagu_zip_sign"
    def dir = new File(path + "/")
    dir.listFiles().each { file ->
        if (file.name =~ /.*${regex}.*\.apk/) {
            String newName = file.name
            newName = newName.replaceAll(~/_zip/, "")
            file.renameTo(new File(file.getParent(), newName))
        }
    }
}

def buildReinforceOutPutFile(File apk, String outputPath) {
    if (apk == null || !apk.exists()) {
        log "build Apk throw exception and forced stop!", true
        throw new FileNotFoundException('apk is not exists and cannot reinforce output')
    }
    def file = new File(outputPath)
    if (!file.exists()) {
        file.mkdir()
    }
    apk.renameTo(new File(file, apk.name))
}

/**
 * 查找apk
 * @param path
 * @param suffix
 * @return
 */
static File findApkFile(path, suffix) {
    def dir = new File(path)
    return dir.listFiles().find { it.isFile() && it =~ /.*${suffix}\.apk/ }
}

def renameByGitInfo(File apk) {
    def outputStream = new ByteArrayOutputStream()
    execCommand "git rev-parse --short HEAD", outputStream
    def newName = apk.name.replaceAll(".apk", "_${outputStream.toString().trim()}.apk")
    def newFile = new File(apk.getParent(), newName)
    if (!apk.renameTo(newFile)) {
        log 'rename By Git Info failed !', true
        return apk
    }
    return newFile
}

/**
 * 加固 -> zip对齐 -> V2签名 -> 签名校验 ->
 * @param flavorName
 * @return
 */
def doReinforce(String buildType, String flavorName = null) {
    cleanFilesPath(buildType, flavorName)   // 清空上一次生成的渠道包
    def defaultApkPath = (flavorName == null || flavorName.isEmpty())
            ? "${project.buildDir}/outputs/apk/$buildType"
            : "${project.buildDir}/outputs/apk/${flavorName}/$buildType"
    def releaseApkFile = findApkFile(defaultApkPath, '')  //遍历文件，寻找release包
    log "1_release: $releaseApkFile"
    if (releaseApkFile != null) {
        def tmpOutPath = getReinforceTmpPathByFlavor(buildType, flavorName)
        reinforceApk(releaseApkFile, tmpOutPath)   //执行加固
        def reinforceApk = findApkFile(tmpOutPath, "_jiagu")  //寻找已加固的apk包
        log "2_reinforce: reinforceApk"
        if (reinforceApk != null) {
            def zipAlignApk = zipAlignApk(reinforceApk) // zip对齐
            log "3_zipAlign: $zipAlignApk"
            if (zipAlignApk != null) {
                def signatureApk = signApkV2(zipAlignApk, buildType)  //使用V2重签名
                log "4_signV2: $signatureApk"
                if (signatureApk != null) {
                    if (checkAndroidV2SignatureJar != null) {
                        checkAndroidV2Signature(signatureApk) // 使用V2签名检查工具检查
                        log "5_checkSignV2: $signatureApk"
                    } else {
                        log "5_checkSignV2: not config check V2 Signature Jar, so ignore !", true
                    }
                    def targetApk = renameByGitInfo(signatureApk)
                    log "6_addGitCommit: $targetApk"
                    def reinforceOutPath = getReinforceOutputPathByFlavor(buildType, flavorName)
                    if (walleEnable) {
                        buildChannelApks(targetApk, reinforceOutPath)  //执行多渠道打包
                        renameChannelApkFiles(reinforceOutPath) //重命名渠道包
                    } else {
                        buildReinforceOutPutFile(targetApk, reinforceOutPath)
                    }
                    log """
                        🎉🎉🎉🎉 加固签名完成 🎉🎉🎉🎉 
                        👇👇👇👇
                        输出路径：$reinforceOutPath
                        👆👆👆👆
                        🎉🎉🎉🎉 加固签名完成 🎉🎉🎉🎉 
                        """
                }
            }
        }
    }
}

/**
 * 创建加固task
 */
android.applicationVariants.all { variant ->
    String flavorName = variant.getFlavorName()
    String buildType = variant.buildType.name
    // 加固任务
    if (flavorName == null) {
        task "assembleReinforce${buildType.capitalize()}" {
            group 'reinforce'
            dependsOn("assembleRelease")
            doLast {
                doReinforce buildType
            }
        }
    } else {
        task "assembleReinforce${flavorName.capitalize()}${buildType.capitalize()}" {
            group 'reinforce'
            dependsOn("assemble${flavorName.capitalize()}${buildType.capitalize()}")
            doLast {
                doReinforce buildType, flavorName
            }
        }
    }
}